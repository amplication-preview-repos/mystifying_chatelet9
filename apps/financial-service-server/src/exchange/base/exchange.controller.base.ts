/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExchangeService } from "../exchange.service";
import { ExchangeCreateInput } from "./ExchangeCreateInput";
import { Exchange } from "./Exchange";
import { ExchangeFindManyArgs } from "./ExchangeFindManyArgs";
import { ExchangeWhereUniqueInput } from "./ExchangeWhereUniqueInput";
import { ExchangeUpdateInput } from "./ExchangeUpdateInput";
import { StockFindManyArgs } from "../../stock/base/StockFindManyArgs";
import { Stock } from "../../stock/base/Stock";
import { StockWhereUniqueInput } from "../../stock/base/StockWhereUniqueInput";

export class ExchangeControllerBase {
  constructor(protected readonly service: ExchangeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Exchange })
  async createExchange(
    @common.Body() data: ExchangeCreateInput
  ): Promise<Exchange> {
    return await this.service.createExchange({
      data: data,
      select: {
        ceo: true,
        closingTime: true,
        country: true,
        createdAt: true,
        currency: true,
        established: true,
        id: true,
        location: true,
        name: true,
        openingTime: true,
        timezone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Exchange] })
  @ApiNestedQuery(ExchangeFindManyArgs)
  async exchanges(@common.Req() request: Request): Promise<Exchange[]> {
    const args = plainToClass(ExchangeFindManyArgs, request.query);
    return this.service.exchanges({
      ...args,
      select: {
        ceo: true,
        closingTime: true,
        country: true,
        createdAt: true,
        currency: true,
        established: true,
        id: true,
        location: true,
        name: true,
        openingTime: true,
        timezone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Exchange })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async exchange(
    @common.Param() params: ExchangeWhereUniqueInput
  ): Promise<Exchange | null> {
    const result = await this.service.exchange({
      where: params,
      select: {
        ceo: true,
        closingTime: true,
        country: true,
        createdAt: true,
        currency: true,
        established: true,
        id: true,
        location: true,
        name: true,
        openingTime: true,
        timezone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Exchange })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExchange(
    @common.Param() params: ExchangeWhereUniqueInput,
    @common.Body() data: ExchangeUpdateInput
  ): Promise<Exchange | null> {
    try {
      return await this.service.updateExchange({
        where: params,
        data: data,
        select: {
          ceo: true,
          closingTime: true,
          country: true,
          createdAt: true,
          currency: true,
          established: true,
          id: true,
          location: true,
          name: true,
          openingTime: true,
          timezone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Exchange })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExchange(
    @common.Param() params: ExchangeWhereUniqueInput
  ): Promise<Exchange | null> {
    try {
      return await this.service.deleteExchange({
        where: params,
        select: {
          ceo: true,
          closingTime: true,
          country: true,
          createdAt: true,
          currency: true,
          established: true,
          id: true,
          location: true,
          name: true,
          openingTime: true,
          timezone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/stocks")
  @ApiNestedQuery(StockFindManyArgs)
  async findStocks(
    @common.Req() request: Request,
    @common.Param() params: ExchangeWhereUniqueInput
  ): Promise<Stock[]> {
    const query = plainToClass(StockFindManyArgs, request.query);
    const results = await this.service.findStocks(params.id, {
      ...query,
      select: {
        avgVolume: true,
        createdAt: true,
        dividendYield: true,

        exchange: {
          select: {
            id: true,
          },
        },

        id: true,
        industry: true,
        marketCap: true,
        name: true,
        peRatio: true,
        price: true,
        sector: true,
        ticker: true,
        updatedAt: true,
        website: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/stocks")
  async connectStocks(
    @common.Param() params: ExchangeWhereUniqueInput,
    @common.Body() body: StockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stocks: {
        connect: body,
      },
    };
    await this.service.updateExchange({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/stocks")
  async updateStocks(
    @common.Param() params: ExchangeWhereUniqueInput,
    @common.Body() body: StockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stocks: {
        set: body,
      },
    };
    await this.service.updateExchange({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/stocks")
  async disconnectStocks(
    @common.Param() params: ExchangeWhereUniqueInput,
    @common.Body() body: StockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stocks: {
        disconnect: body,
      },
    };
    await this.service.updateExchange({
      where: params,
      data,
      select: { id: true },
    });
  }
}
